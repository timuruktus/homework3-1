
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

// This is class that describes you smart contract.
contract DataTypes {
    // Contract can have an instance variables.
    // In this example instance variable `timestamp` is used to store the time of `constructor` or `touch`
    // function call
    uint32 public timestamp;
    string[] peopleQueue;

    // Contract can have a `constructor` â€“ function that will be called when contract will be deployed to the blockchain.
    // In this example constructor adds current time to the instance variable.
    // All contracts need call tvm.accept(); for succeeded deploy
    constructor() public {
        // Check that contract's public key is set
        require(tvm.pubkey() != 0, 101);
        // Check that message has signature (msg.pubkey() is not zero) and
        // message is signed with the owner's private key
        require(msg.pubkey() == tvm.pubkey(), 102);
        // The current smart contract agrees to buy some gas to finish the
        // current transaction. This actions required to process external
        // messages, which bring no value (henceno gas) with themselves.
        tvm.accept();

        timestamp = now;
    }

    function addToQueue(string name) public{
        tvm.accept();
        // peopleQueue[peopleQueue.length] = name; WHY CAN'T USE??
        peopleQueue.push(name);
    }

    function removeFirstInQueue() public{
        require(peopleQueue.length != 0, 100);
        tvm.accept();
        string[] tempArray;
        for(uint32 i = 1; i < peopleQueue.length; i++){
            tempArray.push(peopleQueue[i]);
        }
        peopleQueue = tempArray;
    }

    //Debug function. Shows people in queue in readable format.
    function showPeopleQueue() public view returns(string){
        require(peopleQueue.length != 0, 200);
        string queue;
        for(uint256 i = 0; i < peopleQueue.length - 1; i++){
            queue.append(peopleQueue[i] + ", ");
        }
        queue.append(peopleQueue[peopleQueue.length - 1] + ".");
        return queue;
    }


    //Debug function. Show the length of the queue.
    function getQueueLength() public returns(uint256){
        return peopleQueue.length;
    }

    
}
